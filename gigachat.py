import os
import requests
import base64
import uuid
import time
import threading
import urllib3
import logging
from telegram.ext import CallbackContext

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

access_token = None
token_expiry = 0
token_lock = threading.Lock()

def get_access_token():
    global access_token, token_expiry
    
    with token_lock:  # –ó–∞—â–∏—Ç–∞ –æ—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±–Ω–æ–≤–∏–ª –ª–∏ —Ç–æ–∫–µ–Ω –¥—Ä—É–≥–æ–π –ø–æ—Ç–æ–∫
        if access_token and time.time() < token_expiry:
            return access_token
            
        client_id = os.environ.get('GIGACHAT_CLIENT_ID')
        client_secret = os.environ.get('GIGACHAT_CLIENT_SECRET')

        if not client_id or not client_secret:
            logger.error("–û—à–∏–±–∫–∞: GIGACHAT_CLIENT_ID –∏–ª–∏ GIGACHAT_CLIENT_SECRET –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            return None

        auth_key = base64.b64encode(f"{client_id}:{client_secret}".encode()).decode()
        url = "https://ngw.devices.sberbank.ru:9443/api/v2/oauth"
        payload = {'scope': 'GIGACHAT_API_PERS'}
        headers = {
            'Content-Type': 'application/x-www-form-urlencoded',
            'Accept': 'application/json',
            'RqUID': str(uuid.uuid4()),
            'Authorization': f'Basic {auth_key}'
        }

        try:
            logger.info("–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞")
            response = requests.post(url, headers=headers, data=payload, verify=False, timeout=30)
            response.raise_for_status()
            data = response.json()
            access_token = data['access_token']
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –∏—Å—Ç–µ—á–µ–Ω–∏—è
            token_expiry = time.time() + data['expires_in'] - 300  # expires_in –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            logger.info(f"–¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω. –ò—Å—Ç–µ–∫–∞–µ—Ç –≤: {time.ctime(token_expiry)}")
            return access_token
        except requests.exceptions.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
            if hasattr(e, 'response') and e.response is not None:
                logger.error(f"–°—Ç–∞—Ç—É—Å –∫–æ–¥: {e.response.status_code}")
                logger.error(f"–¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: {e.response.text}")
            return None

def refresh_token_periodically():
    while True:
        try:
            get_access_token()
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –∑–∞ 5 –º–∏–Ω—É—Ç –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è
            sleep_time = max(300, token_expiry - time.time() - 300)
            logger.info(f"–°–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ {sleep_time} —Å–µ–∫—É–Ω–¥")
            time.sleep(sleep_time)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
            time.sleep(300)  # –ü–æ–≤—Ç–æ—Ä—è–µ–º —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ

def get_gigachat_response(message: str, context: CallbackContext) -> str:
    global access_token
    logger.info(f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {time.ctime(time.time())}")
    logger.info(f"–í—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {time.ctime(token_expiry)}")
    logger.info(f"–¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω: {'–î–∞' if access_token else '–ù–µ—Ç'}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ —Å –∑–∞–ø–∞—Å–æ–º –≤—Ä–µ–º–µ–Ω–∏
    if not access_token or time.time() > (token_expiry - 60):
        logger.info("–û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω...")
        if not get_access_token():
            return "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ üõ†Ô∏è"

    if not context.user_data.get('gigachat_attempts'):
        context.user_data['gigachat_attempts'] = 0

    if context.user_data['gigachat_attempts'] >= 2:
        context.user_data['gigachat_attempts'] = 0
        if context.user_data.get('last_response_was_fallback'):
            return "–ö–∞–∂–µ—Ç—Å—è, —Ç—ã –∑–∞–Ω—è—Ç üòÑ –ù–∞–ø–∏—à–∏ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫—É (@mundshtukova), –æ–Ω–∞ –ø–æ–º–æ–∂–µ—Ç —Å Greenway!"
        context.user_data['last_response_was_fallback'] = True
        return "–û–π, –¥–∞–≤–∞–π –≤–µ—Ä–Ω–µ–º—Å—è –∫ Greenway! üòä –•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö –∏–ª–∏ –æ –±–∏–∑–Ω–µ—Å–µ?"

    model = 'GigaChat'
    url = "https://gigachat.devices.sberbank.ru/api/v1/chat/completions"
    prompt = (
        f"–¢—ã –±–æ—Ç Greenway, –æ—Ç–≤–µ—á–∞–π –∂–∏–≤–æ, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, —Ç–æ–ª—å–∫–æ –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö Greenway (–±–æ–ª–µ–µ 1000 –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ 30+ –±—Ä–µ–Ω–¥–æ–≤), "
        f"–±–∏–∑–Ω–µ—Å–µ –∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ù–µ –æ–±—Å—É–∂–¥–∞–π –¥—Ä—É–≥–∏–µ —Ç–µ–º—ã, –∏—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–π –∫ —Å—Ü–µ–Ω–∞—Ä–∏—é. "
        f"–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–º. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª: '{message}'"
    )

    payload = {
        'model': model,
        'messages': [{'role': 'user', 'content': prompt}],
        'max_tokens': 100,
        'temperature': 0.7
    }

    headers = {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        'Authorization': f'Bearer {access_token}',
        'RqUID': str(uuid.uuid4())
    }

    try:
        logger.info(f"–ó–∞–ø—Ä–æ—Å –∫ GigaChat: –º–æ–¥–µ–ª—å={model}")
        response = requests.post(url, headers=headers, json=payload, verify=False, timeout=30)
        
        # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        logger.info(f"–°—Ç–∞—Ç—É—Å –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        
        if response.status_code == 401:
            logger.warning("–ü–æ–ª—É—á–µ–Ω 401 Unauthorized, –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω...")
            if get_access_token():
                headers['Authorization'] = f'Bearer {access_token}'
                response = requests.post(url, headers=headers, json=payload, verify=False, timeout=30)
            else:
                return "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ üõ†Ô∏è"
        
        response.raise_for_status()
        result = response.json()
        context.user_data['gigachat_attempts'] += 1
        context.user_data['last_response_was_fallback'] = False
        
        if 'choices' in result and len(result['choices']) > 0:
            return result['choices'][0]['message']['content']
        else:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: {result}")
            return "–ü–æ–ª—É—á–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ ü§î"
            
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ GigaChat: {e}")
        if hasattr(e, 'response') and e.response is not None:
            logger.error(f"–°—Ç–∞—Ç—É—Å –∫–æ–¥: {e.response.status_code}")
            logger.error(f"–¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: {e.response.text}")
        context.user_data['last_response_was_fallback'] = True
        return "–û–π, —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –Ω–µ–ø–æ–ª–∞–¥–∫–∞ üòì –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫—É!"

def start_token_refresh():
    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π —Ç–æ–∫–µ–Ω –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    get_access_token()
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    threading.Thread(target=refresh_token_periodically, daemon=True).start()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
start_token_refresh()