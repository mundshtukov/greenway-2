import os
import requests
import base64
import uuid
import time
import threading
import urllib3
import logging
from telegram.ext import CallbackContext

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)  # –ü–æ–¥–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è

access_token = None
token_expiry = 0

def get_access_token():
    global access_token, token_expiry
    client_id = os.environ.get('GIGACHAT_CLIENT_ID')
    client_secret = os.environ.get('GIGACHAT_CLIENT_SECRET')

    if not client_id or not client_secret:
        logger.error("–û—à–∏–±–∫–∞: GIGACHAT_CLIENT_ID –∏–ª–∏ GIGACHAT_CLIENT_SECRET –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        return None

    auth_key = base64.b64encode(f"{client_id}:{client_secret}".encode()).decode()
    url = "https://ngw.devices.sberbank.ru:9443/api/v2/oauth"
    payload = {'scope': 'GIGACHAT_API_PERS'}
    headers = {
        'Content-Type': 'application/x-www-form-urlencoded',
        'Accept': 'application/json',
        'RqUID': str(uuid.uuid4()),
        'Authorization': f'Basic {auth_key}'
    }

    try:
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Ç–æ–∫–µ–Ω: url={url}")
        response = requests.post(url, headers=headers, data=payload, verify=False, timeout=30)
        response.raise_for_status()
        data = response.json()
        access_token = data['access_token']
        token_expiry = time.time() + data['expires_at'] / 1000 - 300
        logger.info(f"–¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        return access_token
    except requests.exceptions.HTTPError as e:
        if e.response.status_code == 429:
            logger.warning(f"–û—à–∏–±–∫–∞ 429: –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ñ–¥–µ–º 120 —Å–µ–∫—É–Ω–¥.")
            time.sleep(120)
            return get_access_token()
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
        return None
    except requests.exceptions.Timeout:
        logger.error("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞")
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
        return None

def check_models():
    global access_token
    if not access_token:
        access_token = get_access_token()
    if not access_token:
        logger.error("–û—à–∏–±–∫–∞: –¢–æ–∫–µ–Ω –Ω–µ –ø–æ–ª—É—á–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–¥–µ–ª–µ–π.")
        return None
    url = "https://gigachat.devices.sberbank.ru/api/v1/models"
    headers = {'Accept': 'application/json', 'Authorization': f'Bearer {access_token}'}
    try:
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π")
        response = requests.get(url, headers=headers, verify=False, timeout=30)
        response.raise_for_status()
        logger.info(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ –ø–æ–ª—É—á–µ–Ω—ã")
        return response.json()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–¥–µ–ª–µ–π: {e}")
        return None

def refresh_token_periodically():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞"""
    while True:
        try:
            get_access_token()
            sleep_time = max(0, token_expiry - time.time() - 60)
            if sleep_time > 0:
                time.sleep(sleep_time)
            else:
                time.sleep(3600)  # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –∂–¥–µ–º —á–∞—Å
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ refresh_token_periodically: {e}")
            time.sleep(3600)  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∂–¥–µ–º —á–∞—Å

def get_gigachat_response(message: str, context: CallbackContext) -> str:
    global access_token
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
    if not access_token or time.time() > token_expiry:
        access_token = get_access_token()

    if not access_token:
        return "–û–π, –¥–∞–≤–∞–π –≤–µ—Ä–Ω–µ–º—Å—è –∫ Greenway! üòä –•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö –∏–ª–∏ –æ –±–∏–∑–Ω–µ—Å–µ?"

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –ø–æ–ø—ã—Ç–æ–∫
    if not context.user_data.get('gigachat_attempts'):
        context.user_data['gigachat_attempts'] = 0

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –ø–æ–ø—ã—Ç–æ–∫
    if context.user_data['gigachat_attempts'] >= 2:
        context.user_data['gigachat_attempts'] = 0
        if context.user_data.get('last_response_was_fallback'):
            return "–ö–∞–∂–µ—Ç—Å—è, —Ç—ã –∑–∞–Ω—è—Ç üòÑ –ù–∞–ø–∏—à–∏ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫—É (@mundshtukova), –æ–Ω–∞ –ø–æ–º–æ–∂–µ—Ç —Å Greenway!"
        context.user_data['last_response_was_fallback'] = True
        return "–û–π, –¥–∞–≤–∞–π –≤–µ—Ä–Ω–µ–º—Å—è –∫ Greenway! üòä –•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö –∏–ª–∏ –æ –±–∏–∑–Ω–µ—Å–µ?"

    models_to_try = ['GigaChat-Pro', 'GigaChat-2']
    url = "https://gigachat.devices.sberbank.ru/api/v1/chat/completions"
    prompt = (
        f"–¢—ã –±–æ—Ç Greenway, –æ—Ç–≤–µ—á–∞–π –∂–∏–≤–æ, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, —Ç–æ–ª—å–∫–æ –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö Greenway (–±–æ–ª–µ–µ 1000 –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ 30+ –±—Ä–µ–Ω–¥–æ–≤), –±–∏–∑–Ω–µ—Å–µ –∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. "
        f"–ù–µ –æ–±—Å—É–∂–¥–∞–π –¥—Ä—É–≥–∏–µ —Ç–µ–º—ã, –∏—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–π –∫ —Å—Ü–µ–Ω–∞—Ä–∏—é. –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–º. "
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª: '{message}'"
    )

    for model in models_to_try:
        payload = {
            'model': model, 
            'messages': [{'role': 'user', 'content': prompt}], 
            'max_tokens': 100
        }
        headers = {
            'Content-Type': 'application/json', 
            'Accept': 'application/json', 
            'Authorization': f'Bearer {access_token}'
        }
        try:
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ GigaChat: model={model}")
            response = requests.post(url, headers=headers, json=payload, verify=False, timeout=30)
            response.raise_for_status()
            result = response.json()
            context.user_data['gigachat_attempts'] += 1
            context.user_data['last_response_was_fallback'] = False
            return result['choices'][0]['message']['content']
        except requests.exceptions.HTTPError as e:
            if e.response.status_code == 403:
                logger.warning(f"–û—à–∏–±–∫–∞ 403 –¥–ª—è –º–æ–¥–µ–ª–∏ {model}: –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â—É—é.")
                models = check_models()
                if models:
                    logger.info(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏: {models}")
            else:
                logger.error(f"–û—à–∏–±–∫–∞ GigaChat –¥–ª—è –º–æ–¥–µ–ª–∏ {model}: {e}")
            continue
        except requests.exceptions.Timeout:
            logger.error(f"–¢–∞–π–º–∞—É—Ç –¥–ª—è –º–æ–¥–µ–ª–∏ {model}")
            continue
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ GigaChat –¥–ª—è –º–æ–¥–µ–ª–∏ {model}: {e}")
            continue

    context.user_data['gigachat_attempts'] = 0
    context.user_data['last_response_was_fallback'] = True
    return "–û–π, –¥–∞–≤–∞–π –≤–µ—Ä–Ω–µ–º—Å—è –∫ Greenway! üòä –•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö –∏–ª–∏ –æ –±–∏–∑–Ω–µ—Å–µ?"

# –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
def start_token_refresh():
    """–ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    refresh_thread = threading.Thread(target=refresh_token_periodically, daemon=True)
    refresh_thread.start()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
start_token_refresh()
check_models()
