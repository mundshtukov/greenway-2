import os
import requests
import base64
import uuid
import time
import threading
import urllib3
import logging
from telegram.ext import CallbackContext

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

access_token = None
token_expiry = 0
token_lock = threading.Lock()

def get_access_token():
    global access_token, token_expiry
    
    with token_lock:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±–Ω–æ–≤–∏–ª –ª–∏ —Ç–æ–∫–µ–Ω –¥—Ä—É–≥–æ–π –ø–æ—Ç–æ–∫
        if access_token and time.time() < token_expiry:
            return access_token
            
        client_id = os.environ.get('GIGACHAT_CLIENT_ID')
        client_secret = os.environ.get('GIGACHAT_CLIENT_SECRET')

        if not client_id or not client_secret:
            logger.error("–û—à–∏–±–∫–∞: GIGACHAT_CLIENT_ID –∏–ª–∏ GIGACHAT_CLIENT_SECRET –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            return None

        # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ API
        apis_to_try = [
            {
                'url': 'https://ngw.devices.sberbank.ru:9443/api/v2/oauth',
                'scope': 'GIGACHAT_API_PERS'
            },
            {
                'url': 'https://gigachat.devices.sberbank.ru/api/v1/oauth',
                'scope': 'GIGACHAT_API_PERS'
            }
        ]

        auth_key = base64.b64encode(f"{client_id}:{client_secret}".encode()).decode()

        for api_config in apis_to_try:
            try:
                logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑: {api_config['url']}")
                
                payload = {'scope': api_config['scope']}
                headers = {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'Accept': 'application/json',
                    'RqUID': str(uuid.uuid4()),
                    'Authorization': f'Basic {auth_key}'
                }

                response = requests.post(
                    api_config['url'], 
                    headers=headers, 
                    data=payload, 
                    verify=False, 
                    timeout=30
                )
                
                logger.info(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
                logger.info(f"–¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: {response.text}")
                
                if response.status_code == 200:
                    data = response.json()
                    
                    if 'access_token' in data:
                        access_token = data['access_token']
                        
                        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è
                        if 'expires_in' in data:
                            token_expiry = time.time() + int(data['expires_in']) - 300
                        else:
                            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–æ–∫–µ–Ω –∂–∏–≤–µ—Ç 30 –º–∏–Ω—É—Ç
                            token_expiry = time.time() + 1800 - 300
                        
                        logger.info(f"–¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω! –ò—Å—Ç–µ–∫–∞–µ—Ç –≤: {time.ctime(token_expiry)}")
                        return access_token
                    else:
                        logger.error(f"–ù–µ—Ç access_token –≤ –æ—Ç–≤–µ—Ç–µ: {data}")
                else:
                    logger.warning(f"–ù–µ—É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç {api_config['url']}: {response.status_code}")
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ {api_config['url']}: {e}")
                continue

        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –Ω–∏ —á–µ—Ä–µ–∑ –æ–¥–∏–Ω API")
        return None

def get_gigachat_response(message: str, context: CallbackContext) -> str:
    global access_token
    
    # –ü—Ä–æ—Å—Ç—ã–µ fallback –æ—Ç–≤–µ—Ç—ã –µ—Å–ª–∏ GigaChat –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    fallback_responses = [
        "–ü—Ä–∏–≤–µ—Ç! üëã –Ø –±–æ—Ç Greenway! –†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç: –ø—Ä–æ–¥—É–∫—Ç—ã –∏–ª–∏ –±–∏–∑–Ω–µ—Å-–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏? üòä",
        "–î–∞–≤–∞–π –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ Greenway! üå± –•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –æ –Ω–∞—à–∏—Ö —ç–∫–æ-–ø—Ä–æ–¥—É–∫—Ç–∞—Ö –∏–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –∑–∞—Ä–∞–±–æ—Ç–∫–∞? üíö",
        "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! ü§î –ù–æ –ª—É—á—à–µ –≤—Å–µ–≥–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫—É https://t.me/mundshtukova - –æ–Ω–∞ –≤—Å–µ —Ä–∞—Å—Å–∫–∞–∂–µ—Ç! üìû",
        "–û–π! üòÖ –î–∞–≤–∞–π –ª—É—á—à–µ —è –ø–æ–∫–∞–∂—É —Ç–µ–±–µ –Ω–∞—à–∏ –ø—Ä–æ–¥—É–∫—Ç—ã –∏–ª–∏ —Ä–∞—Å—Å–∫–∞–∂—É –æ –±–∏–∑–Ω–µ—Å–µ —Å Greenway! üöÄ"
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
    if not access_token or time.time() > (token_expiry - 60):
        logger.info("–û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω...")
        if not get_access_token():
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π fallback
            import random
            return random.choice(fallback_responses)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –ø–æ–ø—ã—Ç–æ–∫
    if not context.user_data.get('gigachat_attempts'):
        context.user_data['gigachat_attempts'] = 0

    if context.user_data['gigachat_attempts'] >= 3:
        context.user_data['gigachat_attempts'] = 0
        if context.user_data.get('last_response_was_fallback'):
            return "–ö–∞–∂–µ—Ç—Å—è, —Ç—ã –∑–∞–Ω—è—Ç üòÑ –ù–∞–ø–∏—à–∏ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫—É (https://t.me/mundshtukova), –æ–Ω–∞ –ø–æ–º–æ–∂–µ—Ç —Å Greenway!"
        context.user_data['last_response_was_fallback'] = True
        return "–û–π, –¥–∞–≤–∞–π –≤–µ—Ä–Ω–µ–º—Å—è –∫ Greenway! üòä –•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö –∏–ª–∏ –æ –±–∏–∑–Ω–µ—Å–µ?"

    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–æ–¥–µ–ª–∏ GigaChat
    models_to_try = ['GigaChat', 'GigaChat-Pro', 'GigaChat:latest']
    
    for model in models_to_try:
        try:
            url = "https://gigachat.devices.sberbank.ru/api/v1/chat/completions"
            prompt = (
                f"–¢—ã –±–æ—Ç Greenway, –æ—Ç–≤–µ—á–∞–π –∂–∏–≤–æ, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, —Ç–æ–ª—å–∫–æ –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö Greenway "
                f"(–±–æ–ª–µ–µ 1000 –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ 30+ –±—Ä–µ–Ω–¥–æ–≤), –±–∏–∑–Ω–µ—Å–µ –∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. "
                f"–ù–µ –æ–±—Å—É–∂–¥–∞–π –¥—Ä—É–≥–∏–µ —Ç–µ–º—ã, –∏—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–π –∫ —Å—Ü–µ–Ω–∞—Ä–∏—é. "
                f"–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–º. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª: '{message}'"
            )

            payload = {
                'model': model,
                'messages': [{'role': 'user', 'content': prompt}],
                'max_tokens': 100,
                'temperature': 0.7
            }

            headers = {
                'Content-Type': 'application/json',
                'Accept': 'application/json',
                'Authorization': f'Bearer {access_token}',
                'RqUID': str(uuid.uuid4())
            }

            logger.info(f"–ó–∞–ø—Ä–æ—Å –∫ GigaChat —Å –º–æ–¥–µ–ª—å—é: {model}")
            response = requests.post(url, headers=headers, json=payload, verify=False, timeout=30)
            
            if response.status_code == 200:
                result = response.json()
                context.user_data['gigachat_attempts'] += 1
                context.user_data['last_response_was_fallback'] = False
                
                if 'choices' in result and len(result['choices']) > 0:
                    return result['choices'][0]['message']['content']
                else:
                    logger.warning(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç –º–æ–¥–µ–ª–∏ {model}")
                    continue
            elif response.status_code == 401:
                logger.warning("–¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫, –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å...")
                if get_access_token():
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑
                    headers['Authorization'] = f'Bearer {access_token}'
                    response = requests.post(url, headers=headers, json=payload, verify=False, timeout=30)
                    if response.status_code == 200:
                        result = response.json()
                        if 'choices' in result and len(result['choices']) > 0:
                            return result['choices'][0]['message']['content']
                break
            else:
                logger.warning(f"–û—à–∏–±–∫–∞ {response.status_code} –æ—Ç –º–æ–¥–µ–ª–∏ {model}: {response.text}")
                continue
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –º–æ–¥–µ–ª–∏ {model}: {e}")
            continue

    # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ—É–¥–∞—á–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
    context.user_data['last_response_was_fallback'] = True
    import random
    return random.choice(fallback_responses)

def refresh_token_periodically():
    """–§–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞"""
    while True:
        try:
            time.sleep(300)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
            if time.time() > (token_expiry - 300):  # –ó–∞ 5 –º–∏–Ω—É—Ç –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è
                logger.info("–í—Ä–µ–º—è –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω...")
                get_access_token()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
            time.sleep(300)

def start_token_refresh():
    """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ —Ç–æ–∫–µ–Ω–æ–≤"""
    logger.info("–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤...")
    
    # –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ –ø–æ–ª—É—á–µ–Ω
    try:
        get_access_token()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞: {e}")
        logger.info("–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–ø—É—Å–∫ –±–µ–∑ —Ç–æ–∫–µ–Ω–∞, –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å fallback –æ—Ç–≤–µ—Ç—ã")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    thread = threading.Thread(target=refresh_token_periodically, daemon=True)
    thread.start()
    logger.info("–§–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞–ø—É—â–µ–Ω–æ")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
start_token_refresh()
